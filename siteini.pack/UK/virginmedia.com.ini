﻿﻿**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: virgintvgo.virginmedia.com
* @MinSWversion: 2.1.4
* @Revision 2 - [21/01/2024] doglover
*  - new website
* @Revision 1 - [13/10/2022] doglover
*  - new website
* @Revision 0 - [31/07/2019] doglover
*  - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=virgintvgo.virginmedia.com|timezone=UTC|maxdays=14|cultureinfo=en-GB|charset=UTF-8|titlematchfactor=90}
site {keepindexpage}
url_index{url ()|https://staticqbr-prod-gb.gnp.cloud.virgintvgo.virginmedia.com/eng/web/epg-service-lite/gb/en/events/segments/|urldate||subpage|}

url_index.headers {customheader=Accept-Encoding=gzip,deflate}
urldate.format {datestring|yyyyMMdd} 
subpage.format{list|000000|060000|120000|180000}
*
url_index.headers {accept=application/json|contenttype=application/json}
url_index.headers {customheader=Accept-Encoding=gzip,deflate}
*
global_temp_2.modify {set|'config_site_id'}
scope.range{(splitindex)|end}
index_showsplit.scrub {multi()|{"channelId":"'global_temp_2'"|"audioLanguages":||}]}}
index_showsplit.modify {remove (type=regex)|"mergedId":".*?",}
index_temp_1.modify {substring(type=regex)|'index_showsplit' "startTime":(\d{10}),} 
index_temp_1.modify {cleanup(removeduplicates span=2 link="index_showsplit")}
index_showsplit.modify {sort(ascending,string)}
sort_by.scrub {single(target="index_showsplit")|"startTime":||,|,}
*index_showsplit.modify {(debug)}
end_scope
*
index_start.scrub {single|"startTime":||,|"}
index_stop.scrub {single|"endTime":||,|"}
index_title.scrub {single|"title":"||"|"}
*index_temp_1.scrub {single ()|"i":"||",}
index_urlshow {url ()|https://spark-prod-gb.gnp.cloud.virgintvgo.virginmedia.com/eng/web/linear-service/v2/replayEvent/|"id":"||"|",}
index_urlshow.modify {addend ('index_urlshow' not "")|?returnLinearContent=true&forceLinearResponse=true&language=en}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate}

*title.scrub {single|"title":"||",|",}
title.modify {addstart|'index_title'}
subtitle.scrub {single|"episodeName":"||"|"}
temp_5.scrub {single ()|"shortDescription":"||"|"}
description.scrub {single ()|"longDescription":"||"|"}
description.modify {addstart ('description' = "")|'temp_5'}
title.modify {addstart ('description' ~ "Liveverslag")|LIVE: }
rating.scrub {single|"minimumAge":"||",|",}
rating.modify {clear("0")}
director.scrub {multi(separator=",")|"directors":[||]|]}
director.modify {remove|"}
actor.scrub {multi(separator=",")|"actors":[||]|]}
actor.modify {remove|"}
category.scrub {multi(separator=",")|"genres":|[|]|]}
category.modify {remove|"}
category.modify {cleanup(style=name)}
category.modify {cleanup(removeduplicates=equal,100)}
*
temp_1.scrub {single ()|"episodeNumber":||,|,}
temp_1.modify {clear(> "10000")}
temp_1.modify {addstart ('temp_1' not "")|E}
temp_2.scrub {single|"seasonNumber":||,|,}
temp_2.modify {clear(> "10000")}
temp_2.modify {addstart ('temp_2' not "")|S}
temp_1.modify {addstart('temp_2' not "")|'temp_2'}
episode.modify {addstart('temp_1' not "")|'temp_1'}
productiondate.scrub {single|"productionDate":"||"|"}
country.scrub {multi (separator=",")|"countryOfOrigin":"||"|",}
*
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  REGION FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index{url|https://spark-prod-gb.gnp.cloud.virgintvgo.virginmedia.com/eng/web/linear-service/v2/channels?cityId=40980&language=en&productClass=Orion-DASH}
*index_site_id.scrub {multi ()|"id":"||",|"logicalChannelNumber"}
*index_site_channel.scrub {multi|"id":"|"name":"|"|"logicalChannelNumber"}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
** @auto_xml_channel_end
*
*For classical credits - remove the next lines
index_title.modify {remove|\}
index_subtitle.modify {remove|\}
index_description.modify {remove|\}
index_category.modify {cleanup(removeduplicates)}
index_category.modify {cleanup}
index_description.modify {addend ('index_director' not "" separator=", " )|\n'index_director'}
index_description.modify {addend ('index_actor' not "" separator="\n" )|\n'index_actor'}
index_description.modify {addend ('index_presenter' not "" separator=", " )|\n'index_presenter'}

index_temp_9.modify {addstart ('index_subtitle' not "") |'index_subtitle'}
index_temp_9.modify {addend ('index_titleoriginal' not "") | ║ 'index_titleoriginal'}
index_temp_9.modify {addend ('index_category' not "" separator=", ") | ║ 'index_category'}
index_temp_9.modify {addend ('index_episode' not "") | ║ 'index_episode'}
index_temp_9.modify {addend ('index_productiondate' not "") | ║ 'index_productiondate'}
index_temp_9.modify {addend ('index_rating' not "") | ║ 'index_rating'}
index_temp_9.modify {addend ('index_country' not "" separator=", ") | ║ 'index_country'}
index_temp_9.modify {remove (type=regex)|^ ║ }
*index_subtitle.modify {set ('index_temp_9' not "")|'index_temp_9'}
index_subtitle.modify {clear}
index_writer.modify  {clear}
index_rating.modify {clear}
index_productiondate.modify {clear}
index_titleoriginal.modify {clear}
index_actor.modify {clear}
index_director.modify {clear}
index_presenter.modify {clear}
index_episode.modify {clear}
index_category.modify {clear}
index_videoquality.modify {clear}

title.modify {remove|\}
subtitle.modify {remove|\}
description.modify {remove|\}
category.modify {cleanup(removeduplicates)}
category.modify {cleanup}
actor.modify {cleanup}
director.modify {cleanup}
actor.modify {replace|\|\||\|}
description.modify {addend('director' not "" separator=", ")|\n'director'}
description.modify {addend('actor' not "" separator="\n")|\n'actor'}
actor.modify {clear} 
director.modify {clear}
temp_9.modify {addstart ('subtitle' not "") |'subtitle'}
temp_9.modify {addend ('index_temp_9' not "") | ║ 'index_temp_9'}
temp_9.modify {addend ('titleoriginal' not "") | ║ 'titleoriginal'}
temp_9.modify {addend ('category' not "" separator=", ") | ║ 'category'}
temp_9.modify {addend ('episode' not "") | ║ 'episode'}
temp_9.modify {addend ('productiondate' not "") | ║ 'productiondate'}
temp_9.modify {addend ('rating' not "") | ║ 'rating'}
temp_9.modify {addend ('country' not "" separator=", ") | ║ 'country'}
temp_9.modify {remove (type=regex)|^ ║ }
subtitle.modify {set ('temp_9' not "")|'temp_9'}
rating.modify {clear}
episode.modify {clear}
category.modify {clear}
productiondate.modify {clear}
titleoriginal.modify {clear}
writer.modify {clear}
producer.modify {clear}
composer.modify {clear}
starrating.modify {clear}
rating.modify {clear}
presenter.modify {clear} 
starrating.modify {clear}
videoquality.modify {clear}
videoaspect.modify {clear}
country.modify {clear}

temp_2.modify {calculate(format=F0 type=char)|'description' #}
loop{('temp_2' > "2300")|end}
description.modify {remove(type=sentence)|-1 1}
temp_2.modify {calculate(format=F0 type=char)|'description' #}
end_loop
title.modify {substring(type=char)|'title' 0 80}
subtitle.modify {substring(type=char)|'subtitle' 0 160}
index_temp_2.modify {calculate(format=F0 type=char)|'index_description' #}
loop{('index_temp_2' > "2300")|end}
index_description.modify {remove(type=sentence)|-1 1}
index_temp_2.modify {calculate(format=F0 type=char)|'index_description' #}
end_loop
index_title.modify {substring(type=char)|'index_title' 0 80}
index_subtitle.modify {substring(type=char)|'index_subtitle' 0 160}