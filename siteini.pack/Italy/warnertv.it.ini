**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: nove.tv,discovery.it,dmax.it,giallotv.it,motortrendtv.it,realtime.it,foodnetwork.it,homegardentv.it
* @MinSWversion: V2.1.4
* @Revision 4 - [16/10/2025] doglover
* @Revision 3 - [08/07/2025] stoc777
* @Revision 2 - [09/06/2025] stoc777 & Mat8861
* @Revision 1 - [04/11/2024] Mat8861
* @Revision 0 - [01/20/2023] Japangelo
*     - Creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=nove.tv|timezone=Europe/Rome|maxdays=7.1|cultureinfo=it-IT|charset=UTF-8|titlematchfactor=90|episodesystem=onscreen}
url_index {url ()|https://public.aurora.enhanced.live/site/page/guida-tv/?include=default&filter[environment]=|channel|&v=2}
url_index.modify {replace ('config_site_id' ="discoverychannelit")|guida-tv|guida-tv-discovery}
url_index.modify {replace ('config_site_id' ="giallo")|guida-tv|guida-tv-giallo}
url_index.headers {customheader=Accept-Encoding=gzip,deflate,br}
index_showsplit.scrub {multi|"programs":[|{|}|]}
index_temp_8.modify {substring(type=regex)|'index_showsplit' "start_dt\":\".*?\","} 
index_temp_8.modify {cleanup(removeduplicates link="index_showsplit")}
*index_showsplit.modify {(debug)}
*
scope.range {(indexshowdetails)|end}
index_start.scrub {single|"start_dt":"||+|+}
index_stop.scrub {single|"end_dt":"||+|+}
index_title.scrub {single|"title":"||"|"}
index_temp_1.scrub {single|"show_name":"||"|"}
index_description.scrub {single|"description":"||"|"}
if {('index_temp_1' not "")|end}
index_title.modify {set|'index_temp_1'}
index_subtitle.scrub {single|"title":"||"|"}
index_description.modify {addstart|'index_subtitle' - }
index_subtitle.modify {remove (type=regex)|Ep\.\d+}
index_description.modify {remove (type=regex)|Ep\.\d+ -}
end_if
index_category.scrub {single|"show_genre":"||"|"}
index_temp_2.scrub {single|"episode":"||"|"}
index_episode.scrub {single()|"season":"||"|"}
index_episode.modify {addstart(not "")|S}
index_episode.modify {addend('index_temp_2' not "")|E'index_temp_2'}
end_scope
*
**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
   *<channel update="i" site="warnertv.it" site_id="nove" xmltv_id="Nove">Nove</channel>
   *<channel update="i" site="warnertv.it" site_id="dmaxit" xmltv_id="DMAX">DMAX</channel>
   *<channel update="i" site="warnertv.it" site_id="giallo" xmltv_id="Giallo TV">Giallo TV</channel>
   *<channel update="i" site="warnertv.it" site_id="realtime" xmltv_id="Real Time">Real Time</channel>
   *<channel update="i" site="warnertv.it" site_id="hgtvit" xmltv_id="Home &amp; Garden TV">Home &amp; Garden TV</channel>
   *<channel update="i" site="warnertv.it" site_id="foodnetwork" xmltv_id="Food Network">Food Network</channel>
   *<channel update="i" site="warnertv.it" site_id="motortrend" xmltv_id="Motor Trend">Motor Trend</channel>
   *<channel update="i" site="warnertv.it" site_id="discoverychannelit" xmltv_id="Discovery Channel">Discovery Channel</channel>** @auto_xml_channel_end
** @auto_xml_channel_end
*For classical credits - remove the next lines
index_title.modify {remove|\}
index_subtitle.modify {remove|\}
index_description.modify {remove|\}
index_category.modify {cleanup(removeduplicates)}
index_category.modify {cleanup}
index_description.modify {addend ('index_director' not "" separator=", " )|\n'index_director'}
index_description.modify {addend ('index_actor' not "" separator="\n" )|\n'index_actor'}
index_description.modify {addend ('index_presenter' not "" separator=", " )|\n'index_presenter'}

index_temp_9.modify {addstart ('index_episode' not "") | ║ 'index_episode'}
index_temp_9.modify {addend ('index_subtitle' not "") | ║ 'index_subtitle'}
index_temp_9.modify {addend ('index_titleoriginal' not "") | ║ 'index_titleoriginal'}
index_temp_9.modify {addend ('index_category' not "" separator=", ") | ║ 'index_category'}
index_temp_9.modify {addend ('index_productiondate' not "") | ║ 'index_productiondate'}
index_temp_9.modify {addend ('index_rating' not "") | ║ 'index_rating'}
index_temp_9.modify {addend ('index_country' not "" separator=", ") | ║ 'index_country'}
index_temp_9.modify {remove (type=regex)|^ ║ }
index_subtitle.modify {set ('index_temp_9' not "")|'index_temp_9'}
index_writer.modify  {clear}
index_rating.modify {clear}
index_productiondate.modify {clear}
index_titleoriginal.modify {clear}
index_actor.modify {clear}
index_director.modify {clear}
index_presenter.modify {clear}
index_episode.modify {clear}
index_category.modify {clear}
index_videoquality.modify {clear}
index_country.modify {clear}

index_temp_2.modify {calculate(format=F0 type=char)|'index_description' #}
loop{('index_temp_2' > "2300")|end}
index_description.modify {remove(type=sentence)|-1 1}
index_temp_2.modify {calculate(format=F0 type=char)|'index_description' #}
end_loop
index_title.modify {substring(type=char)|'index_title' 0 120}
index_subtitle.modify {substring(type=char)|'index_subtitle' 0 120}


index_title.modify {addend ('index_title' not "")|'global_temp_9'}
index_subtitle.modify {addend ('index_subtitle' not "")|'global_temp_9'}
index_description.modify {addend ('index_description' not "")|'global_temp_9'}



