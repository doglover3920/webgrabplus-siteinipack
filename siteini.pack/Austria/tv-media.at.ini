**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: tv-media.at
* @MinSWversion: V2.1.4
* @Revision 5 - [14/02/2025] doglover
* @Revision 4 - [01/05/2023] doglover
* Update
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=tv-media.at|timezone=Europe/Vienna|maxdays=7|cultureinfo=de-AT|charset=utf-8|titlematchfactor=80}
site {ratingsystem=AT|episodesystem=onscreen}
*
scope.range{(urlindex)|end}
url_index {url()|https://www.tv-media.at/graphql}
url_index.headers {method=POST}
url_index.headers {postdata={"operationName":"GetChannelProgram","query":"query GetChannelProgram($id: String!, $from: DateTime!, $to: DateTime!, $amount: Int!, $includeImage: Boolean! = false) { channelShowtimes( from: $from until: $to first: $amount channelId: $id page: 1 ) { data {  __typename  id  event_id  title  start  stop  ... on TVChannelShowtime @include(if: $includeImage) {  image {   ...FairuAsset   __typename  }  __typename  } } __typename }}fragment FairuAsset on FairuAsset { id url width height focal_point name alt copyright_text caption __typename}","variables":{"amount":100,"from":"'global_temp_1' 06:00:00","id":"'global_temp_3'","includeImage":true,"to":"'global_temp_2' 06:00:00"}}}
url_index.headers {customheader=Accept-Encoding=gzip,deflate}
url_index.headers {contenttype=application/json}
urldate.format {datestring|yyyy-MM-dd}
global_temp_1.modify {calculate(format=date,yyyy-MM-dd)|'urldate'}
global_temp_2.modify {calculate(format=date,yyyy-MM-dd)|'global_temp_1' 1:00:00 +}
global_temp_3.modify {set|'config_site_id'}
end_scope
*
scope.range {(splitindex)|end}
index_showsplit.scrub {multi()|{"data":[||],"__typename":"ShowtimesPaginationList"}}}}
index_showsplit.modify{remove(type=regex)|\!\?\?\!}
index_showsplit.modify {replace|\},\{|\}\|\{}
index_showsplit.modify {cleanup(style=unidecode)}
index_showsplit.modify {cleanup(style=jsondecode)}
index_showsplit.modify {cleanup(removeduplicates)}
index_showsplit.modify {sort(ascending,string)}
sort_by.scrub {multi (target="index_showsplit")|"start":"||",|"stop"}
*index_showsplit.modify {(debug)}
end_scope

*
scope.range {(indexshowdetails)|end}
index_start.scrub {single|"start":"||"|"}
*index_stop.scrub {single|"stop":"||"|"}
index_title.scrub {single|"title":"||"|",}
index_title.modify {cleanup}
index_temp_1.scrub {regex||"event_id":"(\d+)",||}
end_scope
*
index_urlshow.modify {addstart()|https://www.tv-media.at/graphql}
index_urlshow.headers {method=POST}
index_urlshow.headers {postdata={"operationName":"GetChannelShowtimeByEventId","query":"query GetChannelShowtimeByEventId($id: String!, $includeChannel: Boolean! = false) { channelShowtimeByEventId(id: $id) { __typename id event_id summary title subtitle start stop year genre countries directors_summary actors_summary metadata {  ...MetaData  __typename } ... on TVChannelShowtime @include(if: $includeChannel) {  channel {  __typename  id  joyn_livestream  }  __typename } image {  ...FairuAsset  __typename } }}fragment MetaData on Meta { __typename meta_title meta_description google_news_title redirect no_index no_follow open_graph_image { id name url __typename } custom_open_graph_title custom_open_graph_description twitter_image { id name url __typename } custom_twitter_title custom_twitter_description twitter_description open_graph_description}fragment FairuAsset on FairuAsset { id url width height focal_point name alt copyright_text caption __typename}","variables":{"id":"'index_temp_1'","includeChannel":true}}}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate}
index_urlshow.headers {contenttype=application/json}
*index_urlshow.headers {accept=multipart/mixed, application/graphql-response+json, application/graphql+json, application/json}
*title.scrub {single()|"title":"||",|",}
title.modify {addstart|'index_title'}
title.modify {cleanup}
subtitle.scrub {single ()|"subtitle":"||",|",}
subtitle.modify {cleanup}
subtitle.modify{clear ('title')}
description.scrub {single|"summary":"||",|",}
description.modify {cleanup(tags="<"">")}
description.modify {cleanup}
description.modify {remove|\}
actor.scrub {multi (separator=",")|"actors_summary":"||"|",}
director.scrub {multi (separator=",")|"directors_summary":"||"|",}
productiondate.scrub {single|"year":||,|,}
country.scrub {single|"countries":"||"|",}
index_category.scrub{single|"genre":"||"|",}

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
** Open https://www.tv-media.at/sender and store it as TV-MEDIA.htm
** @auto_xml_channel_start
*url_index {url|file://TV-MEDIA.htm}
*index_site_id.scrub {multi()|"TVChannel",|"id":"|"|}
*index_site_channel.scrub {multi()|"TVChannel",|"name":"|"|}
*index_site_id.modify {cleanup(removeduplicates link="index_site_channel")}
** @auto_xml_channel_end

*For classical credits - remove the next lines
index_title.modify {remove|\}
index_subtitle.modify {remove|\}
index_description.modify {remove|\}
index_category.modify {cleanup(removeduplicates)}
index_category.modify {cleanup}
index_subtitle.modify {cleanup}
index_temp_4.modify {set|'index_category'}
index_temp_5.modify {set|'index_subtitle'}
index_temp_6.modify {set|'index_episode'}
index_temp_7.modify {set|'index_productiondate'}
index_temp_8.modify {set|'index_rating'}
index_subtitle.modify {clear}
index_writer.modify  {clear}
index_rating.modify {clear}
index_productiondate.modify {clear}
index_titleoriginal.modify {clear}
index_actor.modify {clear}
index_director.modify {clear}
index_presenter.modify {clear}
index_episode.modify {clear}
index_category.modify {clear}
index_videoquality.modify {clear}

title.modify {remove|\}
subtitle.modify {remove|\}
description.modify {remove|\}
category.modify {cleanup(removeduplicates)}
category.modify {cleanup}
actor.modify {cleanup}
director.modify {cleanup}
actor.modify {replace|\|\||\|}
description.modify {addend('director' not "" separator=", ")|\n'director'}
description.modify {addend('actor' not "" separator="\n")|\n'actor'}
actor.modify {clear} 
director.modify {clear}
temp_9.modify {addstart ('episode' not "") | ║ 'episode'}
temp_9.modify {addstart ('index_temp_6' not "") | ║ 'index_temp_6'}
temp_9.modify {addend ('subtitle' not "") | ║ 'subtitle'}
temp_9.modify {addend ('index_temp_5' not "") | ║ 'index_temp_5'}
temp_9.modify {addend ('titleoriginal' not "") | ║ 'titleoriginal'}
temp_9.modify {addend ('category' not "" separator=", ") | ║ 'category'}
temp_9.modify {addend ('index_temp_4' not "" separator=", ") | ║ 'index_temp_4'}
temp_9.modify {addend ('country' not "" separator=", ") | ║ 'country'}
temp_9.modify {addend ('productiondate' not "") | ║ 'productiondate'}
temp_9.modify {addend ('index_temp_7' not "") | ║ 'index_temp_7'}
temp_9.modify {addend ('rating' not "") | ║ 'rating'}
temp_9.modify {addend ('index_temp_8' not "") | ║ 'index_temp_8'}
temp_9.modify {remove (type=regex)|^ ║ }
subtitle.modify {set ('temp_9' not "")|'temp_9'}
rating.modify {clear}
episode.modify {clear}
category.modify {clear}
productiondate.modify {clear}
titleoriginal.modify {clear}
writer.modify {clear}
producer.modify {clear}
composer.modify {clear}
starrating.modify {clear}
rating.modify {clear}
presenter.modify {clear} 
starrating.modify {clear}
videoquality.modify {clear}
videoaspect.modify {clear}
country.modify {clear}

temp_2.modify {calculate(format=F0 type=char)|'description' #}
loop{('temp_2' > "2300")|end}
description.modify {remove(type=sentence)|-1 1}
temp_2.modify {calculate(format=F0 type=char)|'description' #}
end_loop
title.modify {substring(type=char)|'title' 0 120}
subtitle.modify {substring(type=char)|'subtitle' 0 120}
index_title.modify {substring(type=char)|'index_title' 0 120}
